#include <iostream>

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    TreeNode* prev = nullptr; // Pointer to keep track of the previous node
    TreeNode* head = nullptr; // Pointer to the head of the doubly linked list

    void preorder(TreeNode* node) {
        if (!node) return;

        // Process the current node
        if (!head) {
            head = node; // The first node becomes the head
        } else {
            node->left = prev; // Link the previous node to the current node
            prev->right = node; // Link the current node to the previous node
        }
        prev = node; // Move the previous pointer to the current node

        // Traverse the left subtree
        preorder(node->left);
        // Traverse the right subtree
        preorder(node->right);
    }

    TreeNode* treeToDoublyList(TreeNode* root) {
        if (!root) return nullptr;

        preorder(root); // Perform preorder traversal

        // Connect the head and tail to make it circular
        head->left = prev; // The last node's left points to head
        prev->right = head; // The head's right points to the last node

        return head; // Return the head of the doubly linked list
    }
};

int main() {
    // Example usage:
    TreeNode* root = new TreeNode(4);
    root->left = new TreeNode(2);
    root->right = new TreeNode(5);
    root->left->left = new TreeNode(1);
    root->left->right = new TreeNode(3);

    Solution solution;
    TreeNode* head = solution.treeToDoublyList(root);

    // Print the doubly linked list
    TreeNode* current = head;
    do {
        std::cout << current->val << " ";
        current = current->right;
    } while (current != head);
    std::cout << std::endl;

    return 0;
}
